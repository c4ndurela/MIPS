	.macro read_int #read int del usuario 
		li $v0,5        #read, almacenar en v0
		syscall
		.end_macro

		.macro print_label (%label) #print string en consola
		la $a0, %label 
		li $v0, 4
		syscall
		.end_macro

		.macro done #finalizar el programa
		li $v0,10
		syscall
		.end_macro	

		.macro print_error (%errno) #print msg error + codigo
		print_label(error)
		li $a0, %errno
		li $v0, 1
		syscall
		print_label(return)
		.end_macro


.data
slist:	.word 0
cclist: .word 0
wclist: .word 0
schedv: .space 32
menu:	.ascii "Colecciones de objetos categorizados \n"
		.ascii "====================================\n"
		.ascii "1-Nueva categoria\n"
		.ascii "2-Siguiente categoria\n"
		.ascii "3-Categoria anterior\n"
		.ascii "4-Listar categorias\n"
		.ascii "5-Borrar categoria actual\n"
		.ascii "6-Anexar objeto a la categoria actual\n"
		.ascii "7-Listar objetos de la categoria\n"
		.ascii "8-Borrar objeto de la categoria\n"
		.ascii "0-Salir\n"
		.asciiz "Ingrese la opcion deseada: "
error:		.asciiz "Error: "
return:		.asciiz "\n"
catName:	.asciiz "\nIngrese el nombre de una categoria: "
selCat:		.asciiz "\nSe ha seleccionado la categoria: "
idObj:		.asciiz "\nIngrese el ID del objeto a eliminar:  "
objName:	.asciiz "\nIngrese el nombre de un objeto: "
success:	.asciiz "La operacion se realizo con exito\n\n"
failure:	.asciiz "La operacion NO se pudo realizar."


		.text
main:
	# initialization scheduler vector
	la $t0, schedv
	la $t1, newcaterogy
	sw $t1, 0($t0)
	la $t1, nextcategory
	sw $t1, 4($t0)
	la $t1, prevcategory
	sw $t1, 8($t0)
	la $t1, listcategories
	sw $t1, 12($t0)
	la $t1, delcategory
	sw $t1, 16($t0)
	la $t1, newobject
	sw $t1, 20($t0)
	la $t1, listobjects
	sw $t1, 24($t0)
	la $t1, delobject
	sw $t1, 28($t0)
main_loop:
	# show menu
	jal menu_display
	beqz $v0, main_end
	addi $v0, $v0, -1		# dec menu option
	sll $v0, $v0, 2                 # multiply menu option by 4
	la $t0, schedv
	add $t0, $t0, $v0
	lw $t1, ($t0)
  	la $ra, main_ret 		# save return address
  	jr $t1		         	# call menu subrutine

# NEW CATEGORY FUNCTION 

newcaterogy:
	addiu $sp, $sp, -4
	sw $ra, 4($sp)
	la $a0, catName		# input category name
	jal getblock
	move $a2, $v0		# $a2 = *char to cateogry name
	la $a0, cclist		# $a0 = list
	li $a1, 0		# $a1 = NULL
	jal addnode
	lw $t0, wclist
	bnez $t0, newcategory_end
	sw $v0, wclist		# update working list if was NULL
newcategory_end:
	print_label(success)
	li $v0, 0		# return success
	lw $ra, 4($sp)
	addiu $sp, $sp, 4
	jr $ra

# NEXT CAATEGORY FUNCTION

nextcategory:
    lw $t0, wclist 
    beqz $t0, err201 	# no categories print error 201
    
    lw $t1, wclist 	 # wwclist copy for compare
    lw $t0, 12($t0)
     
    beq $t0, $t1, err202 	# one category print error 202
    sw $t0, wclist 	        # save wclist from register
    lw $t0, 8($t0) 
    print_label(selCat)
    la $a0, 0($t0) 	      #print selected category
    li $v0, 4 	
    syscall 
    jr $ra
		
err201:
	print_error(201)
	jr $ra

err202:
	print_error(202)
	jr $ra

# PREVIOUS CATEGORY FUNCTION

prevcategory:
	lw $t0, wclist 
	beqz $t0, err201 	# no categories print error 201
	
  	lw $t1, wclist 	        # wclist copy for compare
  	lw $t0, 0($t0) 
  	
        beq $t0, $t1, err202 	# one category print error 202
        sw $t0, wclist 	
        lw $t0, 8($t0)
        print_label(selCat)
        la $a0, 0($t0)  	#print selected category
        li $v0, 4 	
        syscall 
        jr $ra


# LIST CATEGORIES FUNCTION - ver

# DELETE CATEGORIES FUNCTION  - ver

# NEW OBJECT FUNCTION -corregir

newobject:
	lw $t0, wclist
	beqz $t0, err501    # no categories print error 401
	addiu $sp, $sp, -4
	sw $ra, 4($sp)
	
	la $a0, objName
	jal getblock		# get memory block
	
	move $a2, $v0
	lw $a0, wclist
	la $a0, 4($a0)
	lw $t0, 0($a0)
	beqz $t0, create_list		# if no objects create new list
	lw $t0, 0($t0)
	lw $t0, 4($t0)
	addi $a1, $t0, 1		# increments the old ID 
	
create_node:
	jal addnode	# add node subrutine
	lw $t0, wclist
	la $t0, 4($t0)
	beqz $t0, first_object		# first object link to the first pointer
	
newobject_end:
	li $v0, 0			# return success
	lw $ra, 4($sp)
	addiu $sp, $sp, 4
	jr $ra

create_list:
	li $a1, 1		# initialize ID
	j create_node
	
first_object:
	sw $v0, 0($t0)		#store $v0 in $t0's start 
	j newobject_end
	

err501:
print_error(501)
j newobject_end



